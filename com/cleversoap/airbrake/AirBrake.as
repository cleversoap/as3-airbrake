/**
* Written by Cleversoap (clever@cleversoap.com)
* https://github.com/cleversoap/as3-airbrake
* MIT License (http://opensource.org/licenses/MIT)
*/
package com.cleversoap.airbrake
{
	import flash.errors.IllegalOperationError;
	import flash.net.URLRequest;
	import flash.net.URLRequestMethod;

	/**
	* Core AirBrake notifier functionality.
	*
	* @important	This class should not be instantiated!
	*
	* http://help.airbrake.io/kb/api-2/notifier-api-v3
	*/
	internal class AirBrake
	{
		//-------------------------------------------------------------[MEMBERS]

		// Several properties are common (and useful) to both API versions
		protected var _apiKey         :String;
		protected var _environment    :String;
		protected var _projectRoot    :String;
		protected var _projectVersion :String;

		// Notifier Data
		protected var _notifier       :Object;

		// URL Request Params
		protected var _contentType    :String;
		protected var _apiUrl         :String;

		//---------------------------------------------------------[CONSTRUCTOR]

		/**
		* Initialises the core of the AirBrake functionality and properties.
		* 
		* @param $apiKey         AirBrake API key for your project.
		* @param $environment    Reporting environment such as "staging" or "production".
		* @param $projectVersion Version of project to report errors for.
		* @param $projectRoot    Root of the project and where the files are located.
		*/
		public function AirBrake($apiKey:String, $environment:String,
		                         $projectVersion:String = "0.0", $projectRoot:String = "./")
		{
			// Assign core member properties that all AirBrake notifiers need.
			_apiKey = $apiKey;
			_environment = $environment;
			_projectVersion = $projectVersion;
			_projectRoot = $projectRoot;

			// Define the notifier to tell AirBrake that
			// what is reporting to it.
			_notifier = {
				"name"    : "com.cleversoap.AirBrake",
				"version" : "0.3",
				"url"     : "https://github.com/cleversoap/as3-airbrake"
			};
		}

		//----------------------------------------------------------[PROPERTIES]

		/**
		* AirBrake API key for the project.
		*/
		public function get apiKey():String
		{
			return _apiKey;
		}

		/**
		* AirBrake environment that errors will be reported to for the project.
		*/
		public function get environment():String
		{
			return _environment;
		}

		/**
		* Project root directory.
		*/
		public function get projectRoot():String
		{
			return _projectRoot;
		}

		/**
		* Project version that errors will be reported for.
		*/
		public function get projectVersion():String
		{
			return _projectVersion;
		}

		//----------------------------------------------------[MEMBER FUNCTIONS] 

		/**
		* Make a URLRequest object that contains the data generated by child
		* implementations of this class. References the _contentType and
		* _apiUrl members.
		*
		* @param $notice Implementation specific notice data.
		*/
		protected function makeRequest($notice:*):URLRequest
		{
			var request:URLRequest = new URLRequest();
			request.method         = URLRequestMethod.POST;
			request.contentType    = _contentType;
			request.url            = _apiUrl;
			request.data           = $notice;
			return request;
		}

		/**
		* Parse an Error object's stack trace and extract all relevant
		* meta-data; in particular the function, file, and line number
		* of each entry. This function also calls makeBackTraceLine which
		* should be implemented by child classes.
		*
		* @param $stackTrace The stack trace string of the Error object.
		*/
		protected function parseStackTrace($stackTrace:String):Array
		{
			var backTrace:Array = [];	

			var lineRegExp:RegExp = /at (?P<type>[\w\.:]+):*\/*(?P<method>\w+)?\(\)(\[(?P<file>.*):(?P<line>\d+)\])?/g;
			
			// Iterate over each entry and call the hopefully implemented
			// makeBackTraceLine to store the entry in the array.
			var match:Object;
			while (match = lineRegExp.exec($stackTrace))
			{
				backTrace.push(makeBackTraceLine(
					(match.file ? match.file : match.type),    // File
					uint(match.line ? match.line : 0),         // Line Number
					(match.method ? match.method : match.type), // Function
					match.type
				));
			}

			return backTrace;
		}

		/**
		* Should be used by child classes to make an implementation specific
		* data structure for each stack trace entry.
		*
		* @param $file     File in which the error occurred or was called.
		* @param $line     Line at which the error occurred or was called.
		* @param $function Function in which the error occurred or was called.
		*/
		protected function makeBackTraceLine($file:String, $line:uint, $function:String, $component:String = null):*
		{
			throw new IllegalOperationError("makeBackTraceLine must be called from child class implementation only");
		}
	}
}
